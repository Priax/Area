DISCORD;Reaction;Send Message;The bot will send message in channel/dm;{"Reaction": "Send Message", "Message": "<message>", "Destination": "<destination>"};{"$MessageSent": "The message sent", "$DestinationMessage": "The channel/DM where the message was sent"}
DISCORD;Reaction;React Message;The bot will react a message by an emoji;{"Reaction": "React Message", "Message": "<message>", "Emoji": "<emoji>"};{"$MessageReacted": "The message which was reacted on", "$EmojiReacted": "The emoji of the reacted message"}
DISCORD;Reaction;Ban User;The bot will ban a user;{"Reaction": "Ban", "User": "<user>", "Where": "<name>"};{"$BannedUser": "The user banned", "$OriginUserBanned": "The guild/channel where the user is banned", "$OriginIDUserBanned": "The guild/channel ID where the user is banned"}
DISCORD;Reaction;Create Channel;The bot will create a channel;{"Reaction": "Create Channel", "Name": "<name>", "From": "<name>"};{"$NameNewChannel": "The name of the channel created", "$OriginNewChannel": "The guild where the channel was created"}
DISCORD;Action;Received Message;When the bot detect a message;{"Action": "Received Message", "Message": "[<message>]", "Destination": "<destination>", "From": "<user>"};{"$MessageReceived": "The message received", "$MessageAuthor": "The author who sent the message"}
DISCORD;Action;Change Perm;When permissions of a user changed;{"Action": "Change Perms", "User": "<user>"};{"$DiscordUserPermChanged": "The user who has changed his permissions", "$DiscordGuildPermChanged": "The guild where he was changed", "$DiscordChannelPermChanged": "The channel where he was changed"}
DISCORD;Action;Create Channel;When a channel is created;{"Action": "Create Channel", "Name": "<name>"};{"$ChannelName": "The name of the channel created", "$ChannelLocalisation": "The guild where it was created"}
DISCORD;Action;User Join;When a user join a guild;{"Action": "User Join"};{"$NewUser": "The name of the new user", "$JoinServerName": "The name of the guild that the user join"}
OSU;Reaction;Get Osu User;Get Osu User with a specific id;{"Reaction": "Get Osu User", "Id": "<Id>"};{"$Id": "Id of Osu Player"}
OSU;Reaction;Get User Beatmaps;Get User Beatmaps with a specific id;{"Reaction": "Get User Beatmaps", "Id": "<Id>"};{"$Id": "Id of Osu Player"}
RIOT;Reaction;Get League User;Get league from user with name of the game and the tag line;{"Reaction": "Get League User", "gameName": "<gameName>", "tagLine": "<tagLine>"};{"$gameName": "Name of league player", "$tagLine": "Tag of league player"}
RIOT;Reaction;Get Summoner;Get summoner from puuid;{"Reaction": "Get Summoner", "puuid": "<puuid>"};{"$puuid": "Player uuid of league player"}
RIOT;Reaction;Get Player Matches;Get player matches from puuid;{"Reaction": "Get Player Matches", "puuid": "<puuid>"};{"$puuid": "Player uuid of league player"}
RIOT;Reaction;Get Player Match Data;Get player match data by id of the match;{"Reaction": "Get Player Match Data", "match_id": "<match_id>"};{"$match_id": "Match id of league game"}
RIOT;Reaction;Get Player Rank;Get player rank by summoner id;{"Reaction": "Get Player Rank", "summoner_id": "<summoner_id>"};{"$summoner_id": "Summoner id of league player"}
GMAIL;Reaction;Send Email;Send Email with your account to another person;{"Reaction": "Send Email", "Accounts": "[<Accounts>]", "To": "<email to send>", "Subject": "<subject of email>", "Text": "<text of the email>"};{"$EmailFrom": "User that received email", "$EmailTo": "User that sent email", "$EmailSubject": "Subject of the email", "$EmailText": "Text of the email", "$EmailID": "Email ID of the email"}
GMAIL;Reaction;Forward Email;Forward a Email to another person with the email ID;{"Reaction": "Forward Email", "Accounts": "[<Accounts>]", "To": "<email to forward>", "MessageID": "<email id>"};{"$ForwardFrom": "User that received email", "$ForwardTo": "User that sent email", "$ForwardSubject": "Subject of the email", "$ForwardText": "Text of the email", "$ForwardID": "Email ID of the email"}
SPOTIFY;Action;Liked a music;When spotify detected a music liked;{"Action": "Liked a music"};{"$LikeUser": "The ID of the user", "$LikeUserID": "The spotify ID of the user", "$LikedTracks": "IDs of musics liked by the user"}
SPOTIFY;Reaction;Create Playlist;Create a playlist with the name and other element to personalize this playlist;{"Reaction": "Create Playlist", "Name": "<name>", "Description": "<description>", "IsPublic": "<isPlublic>", "IsCollaborative": "<isCollaboartive>", "EvenIsExist": "<EvenIsExist>"};{"$PlaylistUser": "The ID of the user", "$PlaylistUserID": "The Spotify ID of the user", "$PlaylistId": "The ID of the new playlist"}
SPOTIFY;Reaction;Add Music In Playlist;Add musics into a playlist with the ID of the playlist;{"Reaction": "Add Music In Playlist", "PlaylistID": "<PlaylistId>", "URIs": "[<uris>]", "Position": "<position>"};{"$AddMusicsUser": "The ID of the user", "$AddMusicsUserID": "The Spotify ID of the user", "$TrackIds": "The Snapshot ID"}
THREADS;Reaction;Create Post;Create a post with a message, media and links;{"Reaction": "Create Post", "Message": "<Message>", "Media": "<Media>", "Links": "<Links>"};{"$ThreadPostMessage": "The message of the post", "$ThreadPostLinks": "Links of media"}
THREADS;Action;Reach Followers;When an user reach a number of follower;{"Action": "Reach Followers", "Followers Number": "<Followers Number>"};{"$ThreadFollowersNumberReach": "The reach of followers number"}